name: Docker Build

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */1 * * *"

env:
  REGISTRY: docker.io

jobs:
  defold-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Check version
        id: defold-version
        run: |
          curl -sSL http://d.defold.com/stable/info.json -o latest_info.json
          latest_version=$(jq -r .version latest_info.json)
          echo "latest_version=$latest_version" >> $GITHUB_OUTPUT
          if [ -f "info.json" ]; then
            current_version=$(jq -r .version info.json)
          else
            current_version=""
          fi
          echo "Current version: $current_version"
          echo "Latest version: $latest_version"
          if [ "$current_version" != "$latest_version" ]; then
            echo "Version changed."
            echo "version_changed=true" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged."
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit
        uses: EndBug/add-and-commit@v9
        if: ${{ steps.defold-version.outputs.version_changed == 'true' }}
        with:
          message: "Update version to ${{ steps.defold-version.outputs.latest_version }}"
          add: info.json
          fetch: true
          push: true
          tag: 'v${{ steps.defold-version.outputs.latest_version }} --force'

  build:
    runs-on: ubuntu-latest
    needs: defold-version
    if: ${{ needs.defold-version.outputs.version_changed == 'true' }}
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge with sigstore
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Get repository name and version
        run: |
          IMAGE_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV          
          VERSION=$(jq -r .version info.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Install the cosign tool to sign and verify container images
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        uses: sigstore/cosign-installer@v3.3.0

      # Set up BuildKit Docker container builder
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login against a Docker registry
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        env:
          TAGS: ${{ env.IMAGE_NAME }}:v${{ env.VERSION }},${{ env.IMAGE_NAME }}:latest
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.TAGS }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign the resulting Docker image digest
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        env:
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
